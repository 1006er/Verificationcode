worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {

    #lua包位置
    lua_package_path "$prefix/lua/?.lua;;";

    # 预加载lua脚本
    init_by_lua_block {
            require "creat_id"
            require "redis_connect"
            require "resty.redis"
        }
    server {
    listen    80;
    server_name  localhost;

    location /get_id {
        content_by_lua_block {
            -- 引入lua文件   生成随机验证码  redis连接
            local creat_id = require "creat_id"
            local redis_connect = require "redis_connect"

            -- 生成验证码
            local id = creat_id.uuid()

            -- 连接redis 返回red实例
            local red = redis_connect.get_redis()

            --向redis中写入验证码记录
            ok, err = red:set(id, 1)
            if not ok then
                ngx.say("Failed to set to Redis  ", err)
                return
            end

            --设置验证码超时时间
            ok, err = red:expire(id, 40)
            if not ok then
                ngx.say("Failed to set expiration time  ", err)
                return
            end

            --返回验证码给client
            ngx.say(id)

            --关闭redis连接
            redis_connect.close_redis(red)
        }
    }
    location /verify_id {
        content_by_lua_block {
            -- 引入lua文件
            local redis_connect = require "redis_connect"

            -- 获取http get 参数 id
            local arg = ngx.req.get_uri_args()
            local id
            for k,v in pairs(arg) do
                if ( k == "id") then
                    id = v
                end
            end
            --连接数据库
            local red = redis_connect.get_redis()

            --判断key值是否存在
            local resp, err = red:exists(id)
            if not resp then
                ngx.say("get key error : ", err)
            end
            if (resp == 0) then
                ngx.say("authentication failed try again")
            else
                ngx.say("authentication successful")
            end

            --关闭数据库
            redis_connect.close_redis(red)
        }
    }
}
}